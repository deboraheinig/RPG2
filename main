#include <iostream>
#include <time.h>

struct arma {
	std::string nome;
	int danoMax;
	int danoMin;
};

struct jogador {
	int vida;
	arma arma;
	int posx;
	int posy;
};

struct inimigo {
	std::string nome;
	int vida;
	arma arma;
};

struct bloco {
	bool isPedra;
	bool isInimigo;
	inimigo* inimigo;
};

struct mapa {
	int tamA;
	int tamL;
	bloco** Bloco;
};

struct fase {
	std::string nome;
	int numInimigos;
	inimigo* inimigos;
	mapa mapa;
};

//Template para definir se o personagem morreu
template <typename T>
bool morreu(T personagem)
{
	if (personagem.vida < 0) {
		return true; // morto
	}
	else {
		return false; // vivo
	}
}

mapa CriarMapa(int tamA, int tamL) {
	mapa newMapa;
	newMapa.tamA = 10;
	newMapa.tamL = 15;

	newMapa.Bloco = new bloco * [newMapa.tamA];

	newMapa.Bloco[0] = new bloco[newMapa.tamA * newMapa.tamL];
	for (int i = 1; i < newMapa.tamA; i++) {
		newMapa.Bloco[i] = newMapa.Bloco[i - 1] + newMapa.tamL;
	}
	for (int i = 0; i < newMapa.tamA; i++) {
		for (int j = 0; j < newMapa.tamL; j++) {
			if (i == 0 || newMapa.tamA - 1 || j == 0 || j == newMapa.tamL - 1) {
				newMapa.Bloco[i][j].isPedra = true;
				continue;
			}
			//20% de chance do bloco estar bloqueado por uma pedra
			if ((rand() % 10 + 1) <= 2) { 
				newMapa.Bloco[i][j].isPedra = true;
			}
		}
	}
	return newMapa;
}

void printar_mapa(mapa newMapa, jogador jog) {
	for (int i = 0; i < newMapa.tamA; i++) {
		for (int j = 0; j < newMapa.tamL; j++) {
			if (newMapa.Bloco[i][j].isPedra) {
				std::cout << "*";
			}
			else if (jog.posx == j && jog.posy == i) {
				std::cout << "1";
			}
			else if (newMapa.Bloco[i][j].isInimigo && newMapa.Bloco[i][j].inimigo->vida > 0) {
				std::cout << "x";
			}
			else {
				std::cout << "-";
			}


		}
	}
}

inimigo* GerarInimigo(int numInimigos) {
	inimigo* n_inimigo = new inimigo[numInimigos];
	std::string nomes[5] = { "Golem", "Arara", "Bandido", "Coveiro","Pedreiro" };

	for (int i = 0; i < numInimigos; i++) {
		n_inimigo[i].nome = nomes[rand() % 10];
		n_inimigo[i].vida = 25 + rand() % 10;
		n_inimigo[i].arma.danoMin = 5 + rand() % 5;
		n_inimigo[i].arma.danoMax = 15 + rand() % 5;
	}
	return n_inimigo;
};

fase CriarFase(int numInimigos, inimigo* inimigos, int mapaTamA, int mapaTamL) {
	fase fase;
	int posx, posy;

	fase.nome = "Deserto do Saara";
	fase.mapa = CriarMapa(mapaTamA, mapaTamL);

	fase.numInimigos = numInimigos;
	fase.inimigos = inimigos;

	for (int i = 0; i < numInimigos; i++) {
		posy = (rand() % (fase.mapa.tamA)) + 1;
		posx = (rand() % (fase.mapa.tamL)) + 1;

		if (!(fase.mapa.Bloco[posy][posx].isPedra || fase.mapa.Bloco[posy][posx].isInimigo)) {
			fase.mapa.Bloco[posy][posx].isInimigo = true;
			fase.mapa.Bloco[posy][posx].inimigo = &fase.inimigos[i];
			break;
		}
	}
	return fase;
}

void Movimentar(jogador jog, fase fase, char c) {
	if (c == 'w' or 'W') {
		jog.posy = jog.posy - 1;
	}
	if (c == 'a' or 'A') {
		jog.posx = jog.posx - 1;
	}
	if (c == 's' or 'S') {
		jog.posy = jog.posy + 1;
	}
	if (c == 'd' or 'D') {
		jog.posx = jog.posx + 1;
	}
}

//Template para definir o dano gerado
template<typename Tata, typename Tdef>
Tdef ataque(Tata atacante, Tdef defensor) {
	//2 - 5
	int intervalo_dano = atacante.arma.danoMax - atacante.arma.danoMin + 1;
	int dano = atacante.arma.danoMin + rand() % intervalo_dano;

	defensor.vida = defensor.vida - dano;

	return defensor;
}

template <typename T>
T danoRand(T n1, T n2)
{
	int a = 0;
	while (a > n2 or a < n1) {
		// a função rand() gera um inteiro aleatório
		a = (n1 + (rand() % n2));
	}
	return a;
}

void combate(jogador& jog, inimigo& inimigos) {

	fase fase;

	while (!morreu(fase.inimigos)) {
		jog = ataque(fase.inimigos, jog);
		fase.inimigos = ataque(jog, fase.inimigos);

		std::cout << "O inimigo " << fase.inimigos->nome << " te atacou com um(a) " << fase.inimigos->arma.nome << "." << std::endl;
		std::cout << "Vida jogador: " << jog.vida << std::endl;
		std::cout << "Voce atacou " << fase.inimigos->nome << " com sua " << fase.inimigos[4].arma.nome << "." << std::endl;
		std::cout << "Vida inimigo: " << fase.inimigos->vida << std::endl;
		std::cout << "" << std::endl;
	
		if (morreu(jog)) {
			std::cout << "O jogador morreu, o jogo acabou";
			std::cout << "*=======*" << std::endl;
			std::cout << "GAME OVER";
			std::cout << "*=======*" << std::endl;
			return;
		}

		std::cout << fase.inimigos->nome << " foi morto." << std::endl << std::endl;
	}
	std::cout << "*============================*" << std::endl;
	std::cout << "Parabens, voce matou um inimigo!" << std::endl;
	std::cout << "*============================*" << std::endl;
}

void jogar_fase(jogador& jog, fase fase) {
	char comando;

	std::cout << "*===================================*" << std::endl;
	std::cout << "|  Entrando no " << fase.nome << "...  |" << std::endl;
	std::cout << "*===================================*" << std::endl;
	printar_mapa(fase.mapa, jog);
	std::cout << "Movimentos:" << std::endl;
	std::cout << " W A S D" << std::endl;

	std::cin >> comando;
	if (comando == 'w' || comando == 'a' || comando == 's' || comando == 'd' ||
		comando == 'W' || comando == 'A' || comando == 'S' || comando == 'D') {
		// Movimenta o personagem pelo mapa
		Movimentar(jog, fase, comando); 

		if (fase.mapa.Bloco[jog.posy][jog.posx].isInimigo && fase.mapa.Bloco[jog.posy][jog.posx].inimigo->vida > 0) {
			//O combate ira iniciar, pois o jogador se encontrou com o inimigo.
			combate(jog, *fase.mapa.Bloco[jog.posy][jog.posx].inimigo);
		}
	}
	else {
		std::cout << "Comando desconhecido. Tente novamente: " << std::endl;
	}
}

	
int main() {
	
	srand(time(NULL));
	
	fase fase;
	fase.nome = "Deserto do Saara";


	inimigo inimigos[5];
	
	for (int i = 0; i < 5; i++) {
		inimigos[i] = *GerarInimigo(5);
	}

	jog.vida = 400;
	jog.arma = {espada, 15,40};

	
	jogar_fase(jog, fase);

}
